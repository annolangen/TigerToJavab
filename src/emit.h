#pragma once
#include <memory>
#include <ostream>
#include <sstream>
#include <string_view>
#include <vector>

namespace emit {

// Things that can emit instructions to push one value on the JVM stack.
class Pushable {
public:
  virtual ~Pushable() = default;
  // Adds instructions to the given code block to push one value on the JVM
  // stack.
  virtual void Push(std::ostream& os) const = 0;
};

// Defined or standard library functions.
class Invocable {
public:
  virtual ~Invocable() = default;
  virtual void Invoke(std::ostream& os) const = 0;
  void Call(std::ostream& os, const std::vector<const Pushable*>& args) const {
    for (const auto& a : args) {
      a->Push(os);
    }
    Invoke(os);
  }
};

// https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6
enum Flag {
  ACC_PUBLIC =
      0x0001, // Declared public; may be accessed from outside its package.
  ACC_PRIVATE =
      0x0002, // Declared private; accessible only within the defining class.
  ACC_PROTECTED =
      0x0004,          // Declared protected; may be accessed within subclasses.
  ACC_STATIC = 0x0008, // Declared static.
  ACC_FINAL = 0x0010,  // Declared final; must not be overridden (ยง5.4.5).
  ACC_SYNCHRONIZED =
      0x0020, // Declared synchronized; invocation is wrapped by a monitor use.
  ACC_BRIDGE = 0x0040,  // A bridge method, generated by the compiler.
  ACC_VARARGS = 0x0080, // Declared with variable number of arguments.
  ACC_NATIVE =
      0x0100, // Declared native; implemented in a language other than Java.
  ACC_ABSTRACT = 0x0400, // Declared abstract; no implementation is provided.
  ACC_STRICT = 0x0800,   // Declared strictfp; floating-point mode is FP-strict.
  ACC_SYNTHETIC = 0x1000, // Declared synthetic; not present in the source code.
};

struct Program {
  // Returns Program instance for Java class files.
  static std::unique_ptr<Program> JavaProgram();

  virtual ~Program() = default;

  // Writes Java class file to given stream
  virtual void Emit(std::ostream& os) = 0;
  virtual const Pushable* DefineStringConstant(std::string_view text) = 0;
  virtual const Pushable* DefineIntegerConstant(int i) = 0;
  virtual const Invocable* LookupLibraryFunction(std::string_view name) = 0;
  virtual void DefineFunction(uint16_t flags, std::string_view name,
                              std::string_view descriptor,
                              std::string_view code_bytes) = 0;
};
} // namespace emit
